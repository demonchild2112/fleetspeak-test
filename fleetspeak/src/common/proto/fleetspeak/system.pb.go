// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fleetspeak/src/common/proto/fleetspeak/system.proto

package fleetspeak

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A MessageAck message is sent from the client to the server to acknowledge the
// successful receipt of one or more messages. Messages from the server to the
// client may be repeated until ack'd.
type MessageAckData struct {
	MessageIds [][]byte `protobuf:"bytes,1,rep,name=message_ids,json=messageIds,proto3" json:"message_ids,omitempty"`
}

func (m *MessageAckData) Reset()                    { *m = MessageAckData{} }
func (m *MessageAckData) String() string            { return proto.CompactTextString(m) }
func (*MessageAckData) ProtoMessage()               {}
func (*MessageAckData) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *MessageAckData) GetMessageIds() [][]byte {
	if m != nil {
		return m.MessageIds
	}
	return nil
}

// A MessageError message is sent from the client to the server to indicate an
// permanent error in processing the message.
type MessageErrorData struct {
	MessageId []byte `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Error     string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *MessageErrorData) Reset()                    { *m = MessageErrorData{} }
func (m *MessageErrorData) String() string            { return proto.CompactTextString(m) }
func (*MessageErrorData) ProtoMessage()               {}
func (*MessageErrorData) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *MessageErrorData) GetMessageId() []byte {
	if m != nil {
		return m.MessageId
	}
	return nil
}

func (m *MessageErrorData) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// A ClientInfo message is sent from the client to the server on initial contact
// and after every configurate change.
type ClientInfoData struct {
	// Labels hardcoded by the client build, e.g. "client:Linux",
	// "client:<build-nr>", "client:canary".
	Labels   []*Label                    `protobuf:"bytes,1,rep,name=labels" json:"labels,omitempty"`
	Services []*ClientInfoData_ServiceID `protobuf:"bytes,2,rep,name=services" json:"services,omitempty"`
}

func (m *ClientInfoData) Reset()                    { *m = ClientInfoData{} }
func (m *ClientInfoData) String() string            { return proto.CompactTextString(m) }
func (*ClientInfoData) ProtoMessage()               {}
func (*ClientInfoData) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ClientInfoData) GetLabels() []*Label {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ClientInfoData) GetServices() []*ClientInfoData_ServiceID {
	if m != nil {
		return m.Services
	}
	return nil
}

type ClientInfoData_ServiceID struct {
	// The name of the installed service.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The signature of the installed service, as provided in the AddServiceData
	// message which created the service.
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *ClientInfoData_ServiceID) Reset()                    { *m = ClientInfoData_ServiceID{} }
func (m *ClientInfoData_ServiceID) String() string            { return proto.CompactTextString(m) }
func (*ClientInfoData_ServiceID) ProtoMessage()               {}
func (*ClientInfoData_ServiceID) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2, 0} }

func (m *ClientInfoData_ServiceID) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClientInfoData_ServiceID) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// A RemoveService message is sent from the server to the client to instruct the
// client to remove an existing service.
type RemoveServiceData struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *RemoveServiceData) Reset()                    { *m = RemoveServiceData{} }
func (m *RemoveServiceData) String() string            { return proto.CompactTextString(m) }
func (*RemoveServiceData) ProtoMessage()               {}
func (*RemoveServiceData) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *RemoveServiceData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// A SignedClientServiceConfig wraps a ClientServiceConfig with a signature,
// making it acceptable to clients.
type SignedClientServiceConfig struct {
	// A serialized ClientServiceConfig, defined below.
	ServiceConfig []byte `protobuf:"bytes,1,opt,name=service_config,json=serviceConfig,proto3" json:"service_config,omitempty"`
	// An RSASSA-PSS signature of service_config, made using a deployment key.
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SignedClientServiceConfig) Reset()                    { *m = SignedClientServiceConfig{} }
func (m *SignedClientServiceConfig) String() string            { return proto.CompactTextString(m) }
func (*SignedClientServiceConfig) ProtoMessage()               {}
func (*SignedClientServiceConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *SignedClientServiceConfig) GetServiceConfig() []byte {
	if m != nil {
		return m.ServiceConfig
	}
	return nil
}

func (m *SignedClientServiceConfig) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type ClientServiceConfig struct {
	// The name that the service will be known as. Primary use is to address
	// message to the service.  the service names 'server' and 'client' are
	// reserved.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The name of the factory which will be used to generate the service.
	Factory string `protobuf:"bytes,2,opt,name=factory" json:"factory,omitempty"`
	// Additional configuration information for the factory to use when setting up
	// the service. The expected type depends upon the factory.
	Config *google_protobuf.Any `protobuf:"bytes,3,opt,name=config" json:"config,omitempty"`
	// The service will only be installed on clients with all of the listed
	// labels. Note that labels for the special 'client' service are checked on
	// the client. All other labels are only checked on the server.
	RequiredLabels []*Label `protobuf:"bytes,6,rep,name=required_labels,json=requiredLabels" json:"required_labels,omitempty"`
	// The time at which the service configuration was signed. Should be populated by
	// the signing tool when creating a SignedClientServiceConfig.
	SignedTime *google_protobuf1.Timestamp `protobuf:"bytes,7,opt,name=signed_time,json=signedTime" json:"signed_time,omitempty"`
}

func (m *ClientServiceConfig) Reset()                    { *m = ClientServiceConfig{} }
func (m *ClientServiceConfig) String() string            { return proto.CompactTextString(m) }
func (*ClientServiceConfig) ProtoMessage()               {}
func (*ClientServiceConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *ClientServiceConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClientServiceConfig) GetFactory() string {
	if m != nil {
		return m.Factory
	}
	return ""
}

func (m *ClientServiceConfig) GetConfig() *google_protobuf.Any {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ClientServiceConfig) GetRequiredLabels() []*Label {
	if m != nil {
		return m.RequiredLabels
	}
	return nil
}

func (m *ClientServiceConfig) GetSignedTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.SignedTime
	}
	return nil
}

type ClientServiceConfigs struct {
	Config []*ClientServiceConfig `protobuf:"bytes,1,rep,name=config" json:"config,omitempty"`
}

func (m *ClientServiceConfigs) Reset()                    { *m = ClientServiceConfigs{} }
func (m *ClientServiceConfigs) String() string            { return proto.CompactTextString(m) }
func (*ClientServiceConfigs) ProtoMessage()               {}
func (*ClientServiceConfigs) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *ClientServiceConfigs) GetConfig() []*ClientServiceConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

// A list of serial numbers of certificates which should be considered revoked.
type RevokedCertificateList struct {
	Serials [][]byte `protobuf:"bytes,1,rep,name=serials,proto3" json:"serials,omitempty"`
}

func (m *RevokedCertificateList) Reset()                    { *m = RevokedCertificateList{} }
func (m *RevokedCertificateList) String() string            { return proto.CompactTextString(m) }
func (*RevokedCertificateList) ProtoMessage()               {}
func (*RevokedCertificateList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *RevokedCertificateList) GetSerials() [][]byte {
	if m != nil {
		return m.Serials
	}
	return nil
}

func init() {
	proto.RegisterType((*MessageAckData)(nil), "fleetspeak.MessageAckData")
	proto.RegisterType((*MessageErrorData)(nil), "fleetspeak.MessageErrorData")
	proto.RegisterType((*ClientInfoData)(nil), "fleetspeak.ClientInfoData")
	proto.RegisterType((*ClientInfoData_ServiceID)(nil), "fleetspeak.ClientInfoData.ServiceID")
	proto.RegisterType((*RemoveServiceData)(nil), "fleetspeak.RemoveServiceData")
	proto.RegisterType((*SignedClientServiceConfig)(nil), "fleetspeak.SignedClientServiceConfig")
	proto.RegisterType((*ClientServiceConfig)(nil), "fleetspeak.ClientServiceConfig")
	proto.RegisterType((*ClientServiceConfigs)(nil), "fleetspeak.ClientServiceConfigs")
	proto.RegisterType((*RevokedCertificateList)(nil), "fleetspeak.RevokedCertificateList")
}

func init() {
	proto.RegisterFile("fleetspeak/src/common/proto/fleetspeak/system.proto", fileDescriptor1)
}

var fileDescriptor1 = []byte{
	// 485 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xef, 0x8a, 0xd3, 0x4e,
	0x14, 0x25, 0xbb, 0xbf, 0x5f, 0xd7, 0xdc, 0xd6, 0xea, 0x8e, 0x45, 0xb2, 0x45, 0x69, 0x09, 0x8a,
	0x15, 0x24, 0xc1, 0xee, 0x07, 0x41, 0x11, 0x5c, 0xba, 0x22, 0x85, 0x8a, 0x30, 0xeb, 0xf7, 0x3a,
	0x4d, 0x6e, 0xc2, 0xd0, 0x24, 0x53, 0x67, 0xa6, 0x85, 0xbe, 0x9b, 0x4f, 0xe4, 0x53, 0x48, 0x66,
	0x26, 0xed, 0xd6, 0xad, 0xe2, 0xb7, 0xcc, 0xb9, 0xe7, 0xdc, 0x7b, 0xee, 0x9f, 0xc0, 0x65, 0x56,
	0x20, 0x6a, 0xb5, 0x42, 0xb6, 0x8c, 0x95, 0x4c, 0xe2, 0x44, 0x94, 0xa5, 0xa8, 0xe2, 0x95, 0x14,
	0x5a, 0xc4, 0xb7, 0x63, 0x5b, 0xa5, 0xb1, 0x8c, 0x0c, 0x4e, 0x60, 0x1f, 0xe8, 0x5f, 0xe4, 0x42,
	0xe4, 0x05, 0x5a, 0xc5, 0x62, 0x9d, 0xc5, 0xac, 0xda, 0x5a, 0x5a, 0x7f, 0xf0, 0x7b, 0x48, 0xf3,
	0x12, 0x95, 0x66, 0xe5, 0xca, 0x11, 0xfe, 0xb5, 0xb8, 0xc5, 0xad, 0x28, 0x7c, 0x0d, 0xdd, 0xcf,
	0xa8, 0x14, 0xcb, 0xf1, 0x2a, 0x59, 0x5e, 0x33, 0xcd, 0xc8, 0x00, 0xda, 0xa5, 0x45, 0xe6, 0x3c,
	0x55, 0x81, 0x37, 0x3c, 0x1d, 0x75, 0x28, 0x38, 0x68, 0x9a, 0xaa, 0xf0, 0x13, 0x3c, 0x74, 0x92,
	0x8f, 0x52, 0x0a, 0x69, 0x44, 0x4f, 0x01, 0xf6, 0xa2, 0xc0, 0x1b, 0x7a, 0xa3, 0x0e, 0xf5, 0x77,
	0x1a, 0xd2, 0x83, 0xff, 0xb1, 0xe6, 0x06, 0x27, 0x43, 0x6f, 0xe4, 0x53, 0xfb, 0x08, 0x7f, 0x78,
	0xd0, 0x9d, 0x14, 0x1c, 0x2b, 0x3d, 0xad, 0x32, 0x61, 0xf2, 0xbc, 0x84, 0x56, 0xc1, 0x16, 0x58,
	0xd8, 0xba, 0xed, 0xf1, 0x79, 0xb4, 0x37, 0x1e, 0xcd, 0xea, 0x08, 0x75, 0x04, 0xf2, 0x01, 0xee,
	0x29, 0x94, 0x1b, 0x9e, 0xa0, 0x0a, 0x4e, 0x0c, 0xf9, 0xd9, 0x6d, 0xf2, 0x61, 0xe2, 0xe8, 0xc6,
	0x52, 0xa7, 0xd7, 0x74, 0xa7, 0xea, 0xbf, 0x07, 0x7f, 0x07, 0x13, 0x02, 0xff, 0x55, 0xac, 0x44,
	0xe3, 0xdd, 0xa7, 0xe6, 0x9b, 0x3c, 0x01, 0x5f, 0xf1, 0xbc, 0x62, 0x7a, 0x2d, 0xd1, 0x58, 0xef,
	0xd0, 0x3d, 0x10, 0xbe, 0x80, 0x73, 0x8a, 0xa5, 0xd8, 0xa0, 0x4b, 0x62, 0x1a, 0x38, 0x92, 0x26,
	0xfc, 0x06, 0x17, 0x37, 0x3c, 0xaf, 0x30, 0xb5, 0x9e, 0x1c, 0x7d, 0x22, 0xaa, 0x8c, 0xe7, 0xe4,
	0x39, 0x74, 0x9d, 0xa1, 0x79, 0x62, 0x10, 0x37, 0xbd, 0xfb, 0xea, 0x80, 0xf6, 0x77, 0x2b, 0x3f,
	0x3d, 0x78, 0x74, 0x2c, 0xf9, 0xb1, 0xa6, 0x02, 0x38, 0xcb, 0x58, 0xa2, 0x85, 0xdc, 0xba, 0x6d,
	0x34, 0x4f, 0xf2, 0x0a, 0x5a, 0xce, 0xc2, 0xe9, 0xd0, 0x1b, 0xb5, 0xc7, 0xbd, 0xc8, 0x9e, 0x5c,
	0xd4, 0x9c, 0x5c, 0x74, 0x55, 0x6d, 0xa9, 0xe3, 0x90, 0xb7, 0xf0, 0x40, 0xe2, 0xf7, 0x35, 0x97,
	0x98, 0xce, 0xdd, 0xce, 0x5a, 0x7f, 0xda, 0x59, 0xb7, 0x61, 0xce, 0xec, 0xee, 0xde, 0x41, 0x5b,
	0x99, 0x89, 0xcc, 0xeb, 0x23, 0x0e, 0xce, 0x4c, 0xb9, 0xfe, 0x9d, 0x72, 0x5f, 0x9b, 0x0b, 0xa7,
	0x60, 0xe9, 0x35, 0x10, 0x7e, 0x81, 0xde, 0x91, 0x5e, 0x15, 0x79, 0xb3, 0xb3, 0x6f, 0x6f, 0x67,
	0x70, 0xf7, 0x1c, 0x0e, 0x14, 0x4d, 0x27, 0xe1, 0x18, 0x1e, 0x53, 0xdc, 0x88, 0x25, 0xa6, 0x13,
	0x94, 0x9a, 0x67, 0x3c, 0x61, 0x1a, 0x67, 0x5c, 0xe9, 0x7a, 0x56, 0x0a, 0x25, 0x67, 0x45, 0xf3,
	0x1f, 0x34, 0xcf, 0x45, 0xcb, 0x98, 0xbc, 0xfc, 0x15, 0x00, 0x00, 0xff, 0xff, 0x10, 0x97, 0xcc,
	0x93, 0xf2, 0x03, 0x00, 0x00,
}
